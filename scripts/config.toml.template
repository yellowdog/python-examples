[COMMON]  ######################################################################

    # YellowDog Application Key and Secret
    # Required
    KEY = "<INSERT Key HERE>"
    SECRET = "<INSERT Secret HERE>"

    # A namespace for grouping YellowDog objects, e.g., the name of an
    # overall project for which YellowDog is being used
    # Required
    NAMESPACE = "MY_NAMESPACE"

    # A name tag to sub-divide objects within the namespace, e.g., to
    # tag a given set of tasks, nodes and data objects
    # Required
    NAME_TAG = "MY_NAME_TAG"

[WORK_REQUIREMENT]  ############################################################

    # Bash script file (stored locally) to be executed
    # Required
    BASH_SCRIPT = "test_bash_script.sh"

    # Arguments and environment to pass to the Bash script
    # Optional
    # ARGS = [] # List of strings
    # ENV = {}  # Dictionary, e.g.: {A = "ONE", B = "TWO"}

    # Worker tags: list of tags (strings) to match the tags associated
    # with Workers
    # A list of strings.
    # Optional
    # WORKER_TAGS = []

    # List of local input files required for the task
    # These will be uploaded to the YellowDog Object Store
    # A list of strings
    # Optional
    # INPUT_FILES = []

    # List of output files to be uploaded back to the YellowDog Object Store
    # after Task execution
    # A list of strings
    # Optional
    # OUTPUT_FILES = []

    # The number of times a Task is retried if it fails
    # Optional
    # MAX_RETRIES = 0

    # Number of times to submit the task
    # Optional
    # TASK_COUNT = 1

    # Name of a JSON file containing a sequence of records containing the
    # values of 'ARGS' and 'ENV' for a sequence of Tasks
    # Optional
    # TASKS_DATA = "my_tasks.json"

[WORKER_POOL]  #################################################################

    # The Compute Requirement Template to use
    # Required
    TEMPLATE_ID = ""

    # The initial number of nodes to provision in the Worker Pool
    # Optional
    # INITIAL_NODES = 1

    # The minimum number of nodes down to which the Worker Pool can be
    # auto-scaled
    # Optional
    # MIN_NODES = 0

    # The maximum number of nodes up to which the Worker Pool can be
    # auto-scaled
    # Optional: Set to the greater of INITIAL_NODES and 1 by default
    # MAX_NODES = 1

    # The number of Workers to create on each node
    # Optional
    # WORKERS_PER_NODE = 1

    # The Worker Tag to associate with the Worker(s)
    # Optional
    # WORKER_TAG = "MY_WORKER_TAG"

    # Whether the Worker Pool and its associated Compute Requirement should
    # be shut down when all workers on all workers on all nodes are idle
    # Optional
    # AUTO_SHUTDOWN = true

    # The delay in minutes before the Worker Pool is shut down
    # if AUTO_SHUTDOWN is true
    # Optional
    # AUTO_SHUTDOWN_DELAY = 10

    # The delay in minutes before idle nodes are shut down due to auto-scaling
    # Optional
    # AUTO_SCALING_IDLE_DELAY = 10

    # The time in minutes to allow for a node to boot and register its
    # worker(s) before it is terminated
    # Optional
    # NODE_BOOT_TIME_LIMIT = 10
